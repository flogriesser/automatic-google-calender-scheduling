// Global variables
var EVENT_NAME = 'Dinner';
var START_HOUR = 11; // 11 AM
var END_HOUR = 14; // 2 PM
var PREFERRED_DURATION = 45; // Preferred duration in minutes
var MIN_DURATION = 30; // Minimum duration in minutes if preferred duration is not available
var OPTIMAL_START_HOUR = 12; // Optimal start time (12 PM)
var DESCRIPTION_IDENTIFIER = 'Automatically Generated by Script';
var EVENT_COLOR = '6'; // Color ID, Google Calendar supports color IDs 1-11

function addDinnerEventForDay(day) {
  var calendar = CalendarApp.getDefaultCalendar();

  // Try to add the event at the optimal time
  var optimalStart = new Date(day);
  optimalStart.setHours(OPTIMAL_START_HOUR, 0, 0);
  var optimalEnd = new Date(optimalStart.getTime() + (PREFERRED_DURATION * 60000));
  if (isTimeSlotAvailable(calendar, optimalStart, optimalEnd)) {
    var event = calendar.createEvent(EVENT_NAME, optimalStart, optimalEnd, {description: DESCRIPTION_IDENTIFIER});
    event.setColor(EVENT_COLOR);
    return;
  }

  // If the optimal time isn't available, search for the next best slot
  var found = false;
  for (var hour = START_HOUR; hour <= END_HOUR - (PREFERRED_DURATION / 60); hour++) {
    for (var minute = 0; minute < 60; minute += 15) {
      var slotStart = new Date(day);
      slotStart.setHours(hour, minute, 0);
      var slotEnd = new Date(slotStart.getTime() + (PREFERRED_DURATION * 60000));

      if (isTimeSlotAvailable(calendar, slotStart, slotEnd)) {
        var event = calendar.createEvent(EVENT_NAME, slotStart, slotEnd, {description: DESCRIPTION_IDENTIFIER});
        event.setColor(EVENT_COLOR);
        found = true;
        break;
      } else {
        // Try for minimum duration if preferred is not available
        slotEnd = new Date(slotStart.getTime() + (MIN_DURATION * 60000));
        if (isTimeSlotAvailable(calendar, slotStart, slotEnd)) {
          var event = calendar.createEvent(EVENT_NAME, slotStart, slotEnd, {description: DESCRIPTION_IDENTIFIER});
          event.setColor(EVENT_COLOR);
          found = true;
          break;
        }
      }
    }
    if (found) break;
  }
}

function isTimeSlotAvailable(calendar, start, end) {
  var events = calendar.getEvents(start, end);
  for (var i = 0; i < events.length; i++) {
    if (!events[i].isAllDayEvent() && !(end <= events[i].getStartTime() || start >= events[i].getEndTime())) {
      return false; // Slot is not available due to an event collision
    }
  }
  return true; // Slot is available
}

function addDinnerEvents() {
  var startDate = new Date(); // Start from today
  var endDate = new Date();
  endDate.setDate(endDate.getDate() + 30); // Check for the next 30 days

  for (var day = startDate; day <= endDate; day.setDate(day.getDate() + 1)) {
    addDinnerEventForDay(new Date(day));
  }
}

function createTimeDrivenTriggers() {
  ScriptApp.newTrigger('addDinnerEvents')
      .timeBased()
      .everyDays(1)
      .create();
}

// Reschedule Dinner events in case of a collision with a newly added event
function onEventAdded(event) {
  var eventDay = new Date(event.getStartTime());
  eventDay.setHours(0, 0, 0, 0); // Normalize the time to the start of the day
  addDinnerEventForDay(eventDay);
}

// Set up a trigger to call onEventAdded when an event is added to the calendar
function setupEventAddedTrigger() {
  var triggers = ScriptApp.getProjectTriggers();
  for (var i = 0; i < triggers.length; i++) {
    if (triggers[i].getHandlerFunction() == 'onEventAdded') {
      ScriptApp.deleteTrigger(triggers[i]);
    }
  }
  ScriptApp.newTrigger('onEventAdded')
      .forUserCalendar(Session.getActiveUser().getEmail())
      .onEventUpdated()
      .create();
}
